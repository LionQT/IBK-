# -*- coding: utf-8 -*-
"""퇴직율0624.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CGaiz-qNrnBDMYw_v1_HUl8lfOKcUl4B
"""

#데이터 연결

from google.colab import drive
drive.mount('/content/drive')

path_resigned = '/content/drive/MyDrive/Colab Notebooks/IBK/퇴사자.csv'
path_employed = '/content/drive/MyDrive/Colab Notebooks/IBK/재직자.csv'

import pandas as pd

df_resigned_raw = pd.read_csv(path_resigned, encoding='cp949')
df_employed_raw = pd.read_csv(path_employed, encoding='cp949')

#정보 추출
def extract_birth_gender(rrn):
    try:
        birth_year = int(rrn[:2])
        code = rrn[7]
        century = 1900 if code in ['1', '2'] else 2000
        year = century + birth_year
        gender = 1 if code in ['1', '3'] else 0
        return year, gender
    except:
        return None, None

def preprocess_resigned(df):
    today = pd.to_datetime('today')
    df = df.drop(columns=['구분', 'NO.'], errors='ignore')
    df['입사일'] = pd.to_datetime(df['입사일'], errors='coerce')
    df['퇴사일'] = pd.to_datetime(df['퇴사일'], errors='coerce')
    df['생년'], df['성별'] = zip(*df['주민등록번호'].astype(str).map(extract_birth_gender))
    df['나이'] = today.year - df['생년']
    df['재직개월'] = ((df['퇴사일'].fillna(today)) - df['입사일']).dt.days // 30
    df['퇴사여부'] = 1
    return df

def preprocess_employed(df):
    today = pd.to_datetime('today')
    df = df.rename(columns={
        '성명': '이름',
        '입사일자': '입사일'
    })
    df['입사일'] = pd.to_datetime(df['입사일'], errors='coerce')
    df['생년'], df['성별'] = zip(*df['주민등록번호'].astype(str).map(extract_birth_gender))
    df['나이'] = today.year - df['생년']
    df['재직개월'] = (today - df['입사일']).dt.days // 30
    df['퇴사여부'] = 0
    df['퇴사일'] = pd.NaT  # 재직자는 퇴사일 None 추가
    return df

df_resigned = preprocess_resigned(df_resigned_raw)
df_employed = preprocess_employed(df_employed_raw)
df_all = pd.concat([df_resigned, df_employed], ignore_index=True)

from sklearn.preprocessing import LabelEncoder

#NaN 처리
df_all['직무'] = df_all['직무'].fillna('미지정')
df_all['근무지'] = df_all['근무지'].fillna('미지정')
df_all['학력'] = df_all['학력'].fillna('미지정')

le_job = LabelEncoder()
le_loc = LabelEncoder()
le_edu = LabelEncoder()
le_job.fit(df_all['직무'].astype(str))
le_loc.fit(df_all['근무지'].astype(str))
le_edu.fit(df_all['학력'].astype(str))

df_resigned['직무_encoded'] = le_job.transform(df_resigned['직무'].astype(str))
df_resigned['근무지_encoded'] = le_loc.transform(df_resigned['근무지'].astype(str))
df_resigned['학력_encoded'] = le_edu.transform(df_resigned['학력'].astype(str))
df_employed['직무_encoded'] = le_job.transform(df_employed['직무'].astype(str))
df_employed['근무지_encoded'] = le_loc.transform(df_employed['근무지'].astype(str))
df_employed['학력_encoded'] = le_edu.transform(df_employed['학력'].astype(str))

df_resigned['직무_텍스트'] = le_job.inverse_transform(df_resigned['직무_encoded'])
df_resigned['근무지_텍스트'] = le_loc.inverse_transform(df_resigned['근무지_encoded'])
df_employed['직무_텍스트'] = le_job.inverse_transform(df_employed['직무_encoded'])
df_employed['근무지_텍스트'] = le_loc.inverse_transform(df_employed['근무지_encoded'])

#데이터 정리
df_all.drop(columns=['구분', 'NO.'], inplace=True, errors='ignore')
df_all = df_all.loc[:, ~df_all.columns.str.startswith('Unnamed')]

df_all['입사일'] = pd.to_datetime(df_all['입사일'], errors='coerce')
df_all['퇴사일'] = pd.to_datetime(df_all['퇴사일'], errors='coerce')

df_all['등급'] = df_all['등급'].astype('Int64')
df_all['단계'] = df_all['단계'].astype('Int64')

df_all = df_all.dropna(subset=['성별', '나이', '재직개월', '직무', '근무지'])

df_all = df_all[df_all['재직개월'] >= 0]

print(df_all.isnull().sum())

df_all.head(20)

#한글 텍스트 패치
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

#한글 패치 확인
import matplotlib.pyplot as plt
plt.rc('font', family='NanumBarunGothic')

#근무지별 퇴사자 수
loc_counts = df_resigned['근무지_텍스트'].value_counts()
print('근무지별 퇴사자 수:')
print(loc_counts, '\n')

import pandas as pd
import matplotlib.pyplot as plt

#근무지별 + 직무별 퇴사자 수 집계
pivot_table = df_resigned.pivot_table(
    index='근무지_텍스트',
    columns='직무_텍스트',
    values='이름',  # 이름을 카운트
    aggfunc='count',
    fill_value=0
)

top_40_locations = pivot_table.sum(axis=1).sort_values(ascending=False).head(30).index
pivot_top40 = pivot_table.loc[top_40_locations]

pivot_top40.plot(kind='bar', stacked=True, figsize=(14, 7))
plt.title('근무지별 직무별 퇴사자 수 (상위 30 근무지)')
plt.ylabel('퇴사자 수')
plt.xlabel('근무지')
plt.xticks(rotation=60)
plt.legend(title='직무', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier

#병합
df_resigned = preprocess_resigned(df_resigned_raw)
df_employed = preprocess_employed(df_employed_raw)

#기본값 채우기
for df in [df_resigned, df_employed]:
    if '등급' not in df.columns:
        df['등급'] = 1
    if '단계' not in df.columns:
        df['단계'] = 1
    if '학력' not in df.columns:
        df['학력'] = '미지정'

df_resigned['퇴사여부'] = 1
df_employed['퇴사여부'] = 0
df_all = pd.concat([df_resigned, df_employed], ignore_index=True)

le_job = LabelEncoder()
le_loc = LabelEncoder()
le_edu = LabelEncoder()
le_job.fit(df_all['직무'].astype(str))
le_loc.fit(df_all['근무지'].astype(str))
le_edu.fit(df_all['학력'].astype(str))

df_all['직무_encoded'] = le_job.transform(df_all['직무'].astype(str))
df_all['근무지_encoded'] = le_loc.transform(df_all['근무지'].astype(str))
df_all['학력_encoded'] = le_edu.transform(df_all['학력'].astype(str))

#학습용 데이터
features = ['나이', '재직개월', '성별', '직무_encoded', '근무지_encoded', '학력_encoded', '등급', '단계']
X = df_all[features]
y = df_all['퇴사여부']

#랜덤포레스트
model = RandomForestClassifier(class_weight='balanced', random_state=42)
model.fit(X, y)

#재직자 퇴사확률 예측
df_employed['직무_encoded'] = le_job.transform(df_employed['직무'].astype(str))
df_employed['근무지_encoded'] = le_loc.transform(df_employed['근무지'].astype(str))
df_employed['학력_encoded'] = le_edu.transform(df_employed['학력'].astype(str))
X_predict = df_employed[features]
df_employed['퇴사확률'] = model.predict_proba(X_predict)[:, 1]
df_employed['퇴사확률(%)'] = (df_employed['퇴사확률'] * 100).round(1).astype(str) + '%'

df_employed_sorted = df_employed.sort_values(by='퇴사확률', ascending=False)

#결과
result_columns = ['이름', '나이', '직무', '근무지', '학력', '입사일', '재직개월', '퇴사확률(%)']
print(df_employed_sorted[result_columns].head(50))



#XGBoost
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import xgboost as xgb
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import train_test_split, cross_val_score
import matplotlib.pyplot as plt

def preprocess_resigned(df):
    today = pd.to_datetime('today')
    df['입사일'] = pd.to_datetime(df['입사일'], errors='coerce')
    df['퇴사일'] = pd.to_datetime(df['퇴사일'], errors='coerce')
    df['생년'], df['성별'] = zip(*df['주민등록번호'].astype(str).map(extract_birth_gender))
    df['나이'] = today.year - df['생년']
    df['재직개월'] = ((df['퇴사일'].fillna(today)) - df['입사일']).dt.days // 30
    df['퇴사여부'] = 1
    return df

def preprocess_employed(df):
    today = pd.to_datetime('today')
    df.rename(columns={'입사일자': '입사일'}, inplace=True)
    df['입사일'] = pd.to_datetime(df['입사일'], errors='coerce')
    df['생년'], df['성별'] = zip(*df['주민등록번호'].astype(str).map(extract_birth_gender))
    df['나이'] = today.year - df['생년']
    df['재직개월'] = (today - df['입사일']).dt.days // 30
    df['퇴사여부'] = 0
    df['퇴사일'] = pd.NaT
    return df

#추출
def extract_birth_gender(rrn):
    try:
        birth_year = int(rrn[:2])
        code = rrn[7]
        century = 1900 if code in ['1', '2'] else 2000
        year = century + birth_year
        gender = 1 if code in ['1', '3'] else 0
        return year, gender
    except:
        return None, None

#병합
df_resigned = preprocess_resigned(df_resigned_raw)
df_employed = preprocess_employed(df_employed_raw)
for df in [df_resigned, df_employed]:
    df['등급'] = df.get('등급', 1)
    df['단계'] = df.get('단계', 1)
    df['학력'] = df.get('학력', '미지정')

df_resigned['퇴사여부'] = 1
df_employed['퇴사여부'] = 0
df_all = pd.concat([df_resigned, df_employed], ignore_index=True)

le_job, le_loc, le_edu = LabelEncoder(), LabelEncoder(), LabelEncoder()
le_job.fit(df_all['직무'].astype(str))
le_loc.fit(df_all['근무지'].astype(str))
le_edu.fit(df_all['학력'].astype(str))

df_all['직무_encoded'] = le_job.transform(df_all['직무'].astype(str))
df_all['근무지_encoded'] = le_loc.transform(df_all['근무지'].astype(str))
df_all['학력_encoded'] = le_edu.transform(df_all['학력'].astype(str))

#학습용 데이터
features = ['나이', '재직개월', '성별', '직무_encoded', '근무지_encoded', '학력_encoded', '등급', '단계']
X = df_all[features]
y = df_all['퇴사여부']

#train/test 분리
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

#모델 학습
model = xgb.XGBClassifier(n_estimators=300, learning_rate=0.1, max_depth=5, random_state=42, eval_metric='logloss')
model.fit(X_train, y_train)

#데이터 검증
y_pred_val = model.predict(X_val)
acc_val = accuracy_score(y_val, y_pred_val)
print(f"\n✅ 검증 데이터 정확도: {acc_val:.4f}")
print("\n✅ 검증 데이터 분류 리포트:")
print(classification_report(y_val, y_pred_val))

#교차 검증
cv_scores = cross_val_score(model, X, y, cv=5, scoring='accuracy')
print(f"\n✅ 교차 검증 정확도 평균: {cv_scores.mean():.4f}")
print(f"✅ fold별 정확도: {cv_scores}")

#전체 데이터로 최종 학습
model.fit(X, y)

#feature 중요도 시각화
xgb.plot_importance(model, max_num_features=10, importance_type='gain')
plt.title('🚀 XGBoost Feature Importance')
plt.show()

#재직자 예측
df_employed['직무_encoded'] = le_job.transform(df_employed['직무'].astype(str))
df_employed['근무지_encoded'] = le_loc.transform(df_employed['근무지'].astype(str))
df_employed['학력_encoded'] = le_edu.transform(df_employed['학력'].astype(str))
X_predict = df_employed[features]
df_employed['퇴사확률'] = model.predict_proba(X_predict)[:, 1]
df_employed['퇴사확률(%)'] = (df_employed['퇴사확률'] * 100).round(1).astype(str) + '%'

df_employed_sorted = df_employed.sort_values(by='퇴사확률', ascending=False)

#결과
result_columns = ['이름', '나이', '직무', '근무지', '학력', '입사일', '재직개월', '퇴사확률(%)']
print(df_employed_sorted[result_columns].head(50))


output_path = '/content/drive/MyDrive/Colab Notebooks/IBK/퇴사예측결과.xlsx'
df_employed_sorted[result_columns].to_excel(output_path, index=False)













